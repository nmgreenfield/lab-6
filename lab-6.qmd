---
title: "Lab 6 - Spicy"
subtitle: "Performing Many Different Versions of an Analysis"
editor: source
embed-resources: true
---

```{r}
#| include: false

library(tidyverse)
library(rlang)
library(purrr)
```

This assignment will challenge your function writing abilities. I'm not going 
to lie, these functions are difficult but well within your reach. I do, however,
want to recognize that not everyone is interested in being a "virtuoso" with 
their function writing. So, there are two options for this week's lab:

- **Option 1:** Complete this lab assignment in search of virtuoso status with
your function writing
- **Option 2:** Complete one of the difficult functions (Exercise 1 or Exercise
2) and complete the "Alternative Lab 6". 

# Setting the Stage

My number one use case for writing functions and iteration / looping is to
perform some exploration or modeling repeatedly for different "tweaked"
versions. For example, our broad goal might be to fit a linear regression model
to our data. However, there are often multiple choices that we have to make in
practice:

- Keep missing values or fill them in (imputation)? 
- Filter out outliers in one or more variables?

We can map these choices to **arguments** in a custom model-fitting function:

- `impute`: TRUE or FALSE
- `remove_outliers`: TRUE or FALSE

A function that implements the analysis and allows for variation in these 
choices:

```{r}
#| echo: true
#| eval: false
#| label: example-code-to-motivate-function

fit_model <- function(df, impute, remove_outliers, mod) {
    if (impute) {
        df <- some_imputation_function(df)
    }
    
    if (remove_outliers) {
        df <- function_for_removing_outliers(df)
    }
    
    lm(mod, data = df)
}
```

# Helper Functions

**Exercise 1:** Write a function that removes outliers in a dataset. The user
should be able to supply the dataset, the variables to remove outliers from, and
a threshold on the number of SDs away from the mean used to define outliers. 
*Hint 1: You will need to calculate a z-score to filter the values!*
*Hint 2: You might want to consider specifying a default value (e.g., 3) for `sd_thresh`.*

```{r}
#| label: exercise-1

remove_outliers <- function(data, ..., sd_thresh = 3){
  
  # grabs variables in ... and converts to character
  vars <- quos(...)  #variables in ...
  var_names <- sapply(vars, as_name) #converts vars to character

  # finds any non-numeric vars and gives warning message
  non_numeric_vars <- var_names[!sapply(data[var_names], is.numeric)]
  
  if (length(non_numeric_vars) > 0) {
    warning("The following variables are categorical and will be ignored: ", 
            paste(non_numeric_vars, collapse = ", "))
  }

  # finds numeric vars and only keeps rows that aren't outliers
  numeric_vars <- var_names[sapply(data[var_names], is.numeric)]

  if (length(numeric_vars) == 0) {
    stop("No numeric variables provided for outlier detection.")
  }

  z_scores <- data %>%
    select(all_of(numeric_vars)) %>%
    mutate(across(everything(), scale))

  keep_rows <- apply(abs(z_scores), 1, function(row) all(row < sd_thresh))

  # return final data set
  return(data[keep_rows, ])
}


```

## Testing Your Function! 

```{r}
#| label: exercise-1-test
#| error: true

## Testing how your function handles multiple input variables
remove_outliers(diamonds, 
                price, 
                x, 
                y, 
                z)

## Testing how your function handles an input that isn't numeric
remove_outliers(diamonds, 
                price, 
                color)

## Testing how your function handles a non-default sd_thresh
remove_outliers(diamonds, 
                price,
                x, 
                y, 
                z, 
                sd_thresh = 2)
```

**Exercise 2:** Write a function that imputes missing values for numeric 
variables in a dataset. The user should be able to supply the dataset, the 
variables to impute values for, and a function to use when imputing. 
*Hint 1: You will need to use `across()` to apply your function, since the user can input multiple variables.*
*Hint 2: The `replace_na()` function is helpful here!*

```{r}
#| label: exercise-2

impute_missing <- function(data, ..., impute_fun = mean){
  
  # grabs variables in ... and converts to character
  vars <- enquos(...) #variables in ...
  var_names <- sapply(vars, as_name) #converts vars to character
  
  impute_fun <- match.fun(impute_fun) #function from impute_fun

  # finds any non-numeric vars and gives warning message
  non_numeric_vars <- var_names[!sapply(data[, var_names], is.numeric)]
  
  if (length(non_numeric_vars) > 0) {
    warning("The following variables are not numeric and will be skipped: ", 
            paste(non_numeric_vars, collapse = ", "))
  }
  
  # Apply imputation only to numeric columns
  data %>%
    mutate(across(
      all_of(var_names),
      ~ if (is.numeric(.)) {replace_na(., impute_fun(., na.rm = TRUE))} else {.}
    ))
}
```

## Testing Your Function! 

```{r}
#| label: exercise-2-test
#| error: true

## Testing how your function handles multiple input variables
impute_missing(nycflights13::flights, 
               arr_delay, 
               dep_delay) 

## Testing how your function handles an input that isn't numeric
impute_missing(nycflights13::flights, 
               arr_delay, 
               carrier)

## Testing how your function handles a non-default impute_fun
impute_missing(nycflights13::flights, 
               arr_delay, 
               dep_delay, 
               impute_fun = median)
```

# Primary Function

**Exercise 3:** Write a `fit_model()` function that fits a specified linear
regression model for a specified dataset. The function should:

- allow the user to specify if outliers should be removed (`TRUE` or `FALSE`)
- allow the user to specify if missing observations should be imputed
(`TRUE` or `FALSE`)

If either option is `TRUE`, your function should call your `remove_outliers()`
or `impute_missing()` functions to modify the data **before** the regression 
model is fit. 

```{r}
#| label: exercise-3

fit_model <- function(data, mod_formula, ...,
                      remove_outliers = FALSE, impute_missing = FALSE,
                      impute_fun = mean, sd_thresh = 3) {
  
  vars <- enquos(...) #variables in ...
  
  # Remove outliers
  if (remove_outliers) {
    data <- remove_outliers(data, !!!vars, sd_thresh = sd_thresh)
  }

  # Impute
  if (impute_missing) {
    data <- impute_missing(data, !!!vars, impute_fun = impute_fun)
  }

  # Fit model
  model <- lm(mod_formula, data = data)
  return(model)
}

```

## Testing Your Function! 

```{r}
#| label: exercise-3-test

fit_model(
  diamonds,
  mod_formula = price ~ carat + cut,
  remove_outliers = TRUE,
  impute_missing = TRUE,
  price, 
  carat
)
```

# Iteration

In the `diamonds` dataset, we want to understand the relationship between
`price` and size (`carat`). We want to explore variation along two choices:

1. The variables included in the model. We'll explore 3 sets of variables:
    - No further variables (just `price` and `carat`)
    - Adjusting for `cut`
    - Adjusting for `cut` and `clarity`
    - Adjusting for `cut`, `clarity`, and `color`

2. Whether or not to impute missing values

3. Whether or not to remove outliers in the `carat` variable (we'll define
outliers as cases whose `carat` is over 3 SDs away from the mean).

## Parameters

First, we need to define the set of parameters we want to iterate the
`fit_model()` function over. The `tidyr` package has a useful function called
`crossing()` that is useful for generating argument combinations. For each
argument, we specify all possible values for that argument and `crossing()` 
generates all combinations. 
*Note that you can create a list of formula objects in R with `c(y ~ x1, y ~ x1 + x2)`.*

```{r}
#| label: example-crossing-arguments
#| eval: false

df_arg_combos <- crossing(
    impute = c(TRUE, FALSE),
    remove_outliers = c(TRUE, FALSE), 
    mod = c(y ~ x1, 
            y ~ x1 + x2)
)
df_arg_combos
```

**Exercise 4:** Use `crossing()` to create the data frame of argument
combinations for our analyses. 

```{r}
#| label: exercise-4

param_grid <- crossing(
  impute_missing = c(TRUE, FALSE),
  remove_outliers = c(TRUE, FALSE),
  mod_formula = c(
    price ~ carat,
    price ~ carat + cut,
    price ~ carat + cut + clarity,
    price ~ carat + cut + clarity + color)
)
```

## Iterating Over the Parameters

We've arrived at the final step! 

**Exercise 5:** Use `pmap()` from `purrr` to apply the `fit_model()` function to
every combination of arguments from `diamonds.

```{r}
#| label: exercise-5

models <- param_grid %>%
  mutate(model = pmap(
    list(impute_missing, remove_outliers, mod_formula),
    ~ fit_model(data = diamonds,
                mod_formula = ..3,
                remove_outliers = ..2,
                impute_missing = ..1,
                carat)
  ))
```

```{r, include=F}
summary(models$model[[1]])
```

